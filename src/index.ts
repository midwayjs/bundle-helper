import { join, resolve, relative } from 'path';
import { safeRequire, safelyGet } from '@midwayjs/core';
import { run } from '@midwayjs/glob';
import { writeFileSync, readFileSync, existsSync } from 'fs';

function removeExtension(filename) {
  const lastDotPosition = filename.lastIndexOf('.');
  if (lastDotPosition === -1) return filename;
  else return filename.substr(0, lastDotPosition);
}

interface EntryGeneratorOptions {
  baseDir?: string;
  ignore?: string[];
  pattern?: string[];
}

export class EntryGenerator {
  run(options: EntryGeneratorOptions = {}) {
    const baseDir = resolve(options.baseDir ?? process.cwd()) ;

    if (!existsSync(join(baseDir, 'tsconfig.json'))) {
      console.warn('not found tsconfig in project and ignore generate');
      return;
    }

    const projectConfig = safeRequire(join(baseDir, 'tsconfig'));
    const srcDir = safelyGet('compilerOptions.rootDir', projectConfig) ?? 'src';
    const sourceDir = join(baseDir, srcDir);

    const DEFAULT_PATTERN = ['**/**.ts', '**/**.tsx', '**/**.js'];
    const DEFAULT_IGNORE_PATTERN = [
      '**/**.d.ts',
      '**/logs/**',
      '**/run/**',
      '**/app/extend/**',
      '**/node_modules/**',
      '**/**.test.ts',
      '**/**.test.js',
      '**/__test__/**',
      '*/index.ts',
    ];
    let fileResults = run(DEFAULT_PATTERN.concat(options.pattern || []), {
      cwd: sourceDir,
      ignore: DEFAULT_IGNORE_PATTERN.concat(options.ignore || []),
    });

    let configurationFile;
    let configurationClassName;

    fileResults = fileResults.filter(file => {
      const content = readFileSync(file).toString();
      if (/@Configuration/.test(content)) {
        configurationFile = file;
        configurationClassName = getConfigurationClassName(content);
        return false;
      }
      if (/export/.test(content)) {
        return true;
      }
      return false;
    });

    const exportFiles = fileResults.map(file => {
      const relativePath = relative(
        sourceDir,
        removeExtension(file),
      ).replace(/\\/g, '/');
      return `export * from './${relativePath}';\n`;
    });

    exportFiles.unshift(
      '/** This file generated by @midwayjs/bundle-helper */\n'
    );
    if (configurationFile) {
      const relativePath = relative(
        sourceDir,
        removeExtension(configurationFile),
      ).replace(/\\/g, '/');
      exportFiles.push(
        `export { ${configurationClassName} as Configuration } from './${relativePath}';\n`
      );
    }

    writeFileSync(join(sourceDir, 'index.ts'), exportFiles.join(''));
  }
}

export function getConfigurationClassName(content: string) {
  const result = content.match(
    /@Configuration\([\s\S]+?\)\s*export\s+class\s+(\w+)\s+{/
  );
  return result[1];
}
